---
- set_fact:
    grafana_data_source: >
      {
        "name":"{{ graphite.grafana_name }}",
        "type":"graphite",
        "url":"http://localhost:{{ graphite.port }}",
        "access":"proxy",
        "basicAuth":false,
        "isDefault":true
      }

- name: Add data source
  uri:
    url: http://localhost:3000/api/datasources
    method: POST
    user: "{{ graphite.user }}"
    password: "{{ graphite.password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ grafana_data_source }}"
    # If we get a 409 Conflict, it means we're already set up. We'll update
    # after this.
    status_code: 200,409
  register: grafana_data_source_result

- name: Get datasource ID
  uri:
    url: "http://localhost:3000/api/datasources/id/{{ graphite.grafana_name }}"
    method: GET
    user: "{{ graphite.user }}"
    password: "{{ graphite.password }}"
    force_basic_auth: yes
  register: grafana_data_source_id
  when: grafana_data_source_result is defined and grafana_data_source_result.status == 409

- name: Update datasource
  uri:
    url: "http://localhost:3000/api/datasources/{{ grafana_data_source_id.json.id }}"
    method: PUT
    user: "{{ graphite.user }}"
    password: "{{ graphite.password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ grafana_data_source }}"
    status_code: 200
  when: grafana_data_source_result is defined and grafana_data_source_result.status == 409

- name: Download Vonage Status Panel
  get_url:
    url: https://grafana.com/api/plugins/vonage-status-panel/versions/1.0.4/download
    dest: /tmp/vonage.zip

- set_fact:
    vonage_plugin_path: /var/lib/grafana/plugins/Vonage-Grafana_Status_panel

- stat:
    path: "{{ vonage_plugin_path }}"
  register: vonage_plugin

- name: Unzip Vonage Status Panel
  unarchive:
    src: /tmp/vonage.zip
    remote_src: true
    dest: /var/lib/grafana/plugins/
  when: vonage_plugin.stat.exists is defined and not vonage_plugin.stat.exists

- name: Move Vonage Status Panel into place
  shell: "mv -f {{ vonage_plugin_path }}* {{ vonage_plugin_path }}"
  when: vonage_plugin.stat.exists is defined and not vonage_plugin.stat.exists

- name: Ship dashboard templates
  copy:
    src: files/dashboards
    dest: /tmp/

- name: Ship dashUpdater.py
  copy:
    src: files/dashUpdater.py
    dest: /tmp/dashUpdater.py

- name: Set correct path in dashUpdater.py
  replace:
    path: /tmp/dashUpdater.py
    regexp: "^dashboard_dir = '.*'"
    replace: "dashboard_dir = 'dashboards'"

- name: Write dashboard.yml
  template:
    src: dashboard.yml
    dest: /tmp/dashboard.yml

- name: Push dashboards to Grafana
  command: python dashUpdater.py
  args:
    chdir: /tmp
