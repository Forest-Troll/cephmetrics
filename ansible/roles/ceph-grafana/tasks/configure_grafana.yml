---
- name: Configure data source
  uri:
    url: http://localhost:3000/api/datasources
    method: POST
    user: admin
    password: admin
    force_basic_auth: yes
    body_format: json
    body: >
      {
        "name":"Local",
        "type":"graphite",
        "url":"http://localhost",
        "access":"proxy",
        "basicAuth":false,
        "isDefault":true
      }
    # If we get a 409 Conflict, it means we're already set up
    status_code: 200,409

- name: Download Vonage Status Panel
  get_url:
    url: https://grafana.com/api/plugins/vonage-status-panel/versions/1.0.4/download
    dest: /tmp/vonage.zip

- set_fact:
    vonage_plugin_path: /var/lib/grafana/plugins/Vonage-Grafana_Status_panel

- stat:
    path: "{{ vonage_plugin_path }}"
  register: vonage_plugin

- name: Unzip Vonage Status Panel
  unarchive:
    src: /tmp/vonage.zip
    remote_src: true
    dest: /var/lib/grafana/plugins/
  when: vonage_plugin.stat.exists is defined and not vonage_plugin.stat.exists

- name: Move Vonage Status Panel into place
  shell: "mv -f {{ vonage_plugin_path }}* {{ vonage_plugin_path }}"
  when: vonage_plugin.stat.exists is defined and not vonage_plugin.stat.exists

- name: Ship dashboard templates
  copy:
    src: files/dashboards
    dest: /tmp/

- name: Ship dashUpdater.py
  copy:
    src: files/dashUpdater.py
    dest: /tmp/dashUpdater.py

- name: Set correct path in dashUpdater.py
  replace:
    path: /tmp/dashUpdater.py
    regexp: "^dashboard_dir = '.*'"
    replace: "dashboard_dir = 'dashboards'"

- name: Write dashboard.yml
  template:
    src: dashboard.yml
    dest: /tmp/dashboard.yml

- name: Push dashboards to Grafana
  command: python dashUpdater.py
  args:
    chdir: /tmp
